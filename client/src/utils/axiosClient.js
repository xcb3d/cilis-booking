import axios from 'axios';

const API_URL = 'http://localhost:5000/api';

// Bi·∫øn ƒë·ªÉ theo d√µi refresh token request ƒëang th·ª±c hi·ªán
let refreshTokenPromise = null;

// Flag to track if the page is in the process of loading
let isPageLoading = true;

// Set page as loaded after some time
setTimeout(() => {
  isPageLoading = false;
}, 1000);

// T·∫°o axios instance
const axiosClient = axios.create({
  baseURL: API_URL,
  withCredentials: true, // Quan tr·ªçng: cho ph√©p cookies ƒë∆∞·ª£c g·ª≠i trong CORS requests
  headers: {
    'Content-Type': 'application/json'
  }
});

// Request interceptor
axiosClient.interceptors.request.use(
  (config) => {
    // Log c√°c request quan tr·ªçng
    if (config.url === '/auth/me') {
      console.log('üîí Sending authentication check request to /auth/me');
    }
    return config;
  },
  (error) => Promise.reject(error)
);

// H√†m ƒë·ªÉ refresh token
const refreshToken = async () => {
  // N·∫øu ƒë√£ c√≥ m·ªôt refresh request ƒëang th·ª±c hi·ªán, return promise ƒë√≥
  if (refreshTokenPromise) {
    return refreshTokenPromise;
  }

  console.log('üîÑ Refreshing token...');
  
  // T·∫°o promise m·ªõi v√† l∆∞u l·∫°i
  refreshTokenPromise = axios
    .post(`${API_URL}/auth/refresh`, {}, { withCredentials: true })
    .finally(() => {
      // Reset ƒë·ªÉ l·∫ßn sau c√≥ th·ªÉ refresh l·∫°i
      refreshTokenPromise = null;
    });

  return refreshTokenPromise;
};

// Response interceptor
axiosClient.interceptors.response.use(
  (response) => {
    // Log response th√†nh c√¥ng cho request quan tr·ªçng
    if (response.config.url === '/auth/me') {
      console.log('‚úÖ Authentication check successful');
    }
    
    // Tr·∫£ v·ªÅ d·ªØ li·ªáu response n·∫øu th√†nh c√¥ng
    return response.data;
  },
  async (error) => {
    const originalRequest = error.config;
    
    // Log l·ªói cho request quan tr·ªçng
    if (originalRequest.url === '/auth/me') {
      console.log('‚ùå Authentication check failed', error);
    }
    
    // N·∫øu l·ªói l√† 401 (Unauthorized) v√† ch∆∞a th·ª≠ refresh token
    // v√† kh√¥ng ph·∫£i l√† request refresh token (ƒë·ªÉ tr√°nh loop v√¥ h·∫°n)
    if (
      error.response?.status === 401 && 
      !originalRequest._retry &&
      !originalRequest.url?.includes('/auth/refresh')
    ) {
      originalRequest._retry = true;
      
      try {
        // Th·ª≠ refresh token
        await refreshToken();
        
        // N·∫øu refresh th√†nh c√¥ng, th·ª≠ l·∫°i request ban ƒë·∫ßu
        return axiosClient(originalRequest);
      } catch (refreshError) {
        // N·∫øu refresh th·∫•t b·∫°i, x·ª≠ l√Ω logout t·∫°i frontend
        console.error('Token refresh failed:', refreshError);
        
        // Don't redirect if page is still loading to allow for state hydration
        if (!isPageLoading && !window.location.pathname.includes('/login')) {
          console.log('Redirecting to login due to auth failure');
          window.location.href = '/login';
        }
        
        return Promise.reject(refreshError);
      }
    }
    
    // N·∫øu kh√¥ng ph·∫£i l·ªói 401 ho·∫∑c refresh ƒë√£ th·∫•t b·∫°i, tr·∫£ v·ªÅ l·ªói
    return Promise.reject(error.response?.data || error);
  }
);

export default axiosClient; 